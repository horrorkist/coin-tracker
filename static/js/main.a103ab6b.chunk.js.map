{"version":3,"sources":["theme.ts","api.tsx","atoms.tsx","components/Coins.tsx","components/Coin.tsx","components/Chart.tsx","components/Price.tsx","App.tsx","index.tsx"],"names":["lightTheme","bgColor","textColor","accentColor","darkTheme","BASE_URL","fetchCoins","a","fetch","response","json","coinId","endDate","Math","floor","Date","now","startDate","themeState","atom","key","default","Wrapper","styled","div","Title","props","theme","ThemeBtn","button","CoinList","ul","Coin","Coins","useQuery","data","isLoading","setThemeState","useSetRecoilState","toggleTheme","prev","onClick","slice","map","coin","to","id","state","name","Buttons","BackBtn","Desc","Links","StyledNavLink","NavLink","navigate","useNavigate","useLocation","useParams","fetchCoinInfo","description","className","isActive","ChartContainer","Chart","fetchCoinHistory","options","chart","type","height","width","xaxis","yaxis","tooltip","enabled","series","price","index","x","time_open","y","open","toFixed","high","low","close","PriceContainer","Price","fetchTickers","round","quotes","USD","percent_change_24h","percent_change_7d","GlobalStyle","createGlobalStyle","App","isDark","useRecoilValue","path","element","queryClient","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"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","file":"static/js/main.a103ab6b.chunk.js","sourcesContent":["import { DefaultTheme } from \"styled-components\";\n\nexport const lightTheme: DefaultTheme = {\n  bgColor: \"#2f3640\",\n  textColor: \"#f5f6fa\",\n  accentColor: \"#9c88ff\",\n};\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: \"whitesmoke\",\n  textColor: \"black\",\n  accentColor: \"#9c88ff\",\n};\n","const BASE_URL = \"https://api.coinpaprika.com/v1\";\n\nexport async function fetchCoins() {\n  const response = await fetch(`${BASE_URL}/coins`);\n  const json = await response.json();\n  return json;\n}\n\nexport async function fetchCoinInfo(coinId: string | undefined) {\n  const response = await fetch(`${BASE_URL}/coins/${coinId}`);\n  const json = await response.json();\n  return json;\n}\n\nexport async function fetchTickers(coinId: string | undefined) {\n  const response = await fetch(`${BASE_URL}/tickers/${coinId}`);\n  const json = await response.json();\n  return json;\n}\n\nexport async function fetchCoinHistory(coinId: string | undefined) {\n  const endDate = Math.floor(Date.now() / 1000);\n  const startDate = endDate - 60 * 60 * 24 * 7;\n  const response = await fetch(\n    `${BASE_URL}/coins/${coinId}/ohlcv/historical?start=${startDate}&end=${endDate}`\n  );\n  const json = await response.json();\n  return json;\n}\n","import { atom } from \"recoil\";\n\nexport const themeState = atom({\n  key: \"themeState\",\n  default: false,\n});\n","import { useQuery } from \"react-query\";\nimport { Link } from \"react-router-dom\";\nimport { useSetRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { fetchCoins } from \"../api\";\nimport { themeState } from \"../atoms\";\n\nconst Wrapper = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Title = styled.div`\n  width: 100%;\n  height: 100px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 32px;\n  color: ${(props) => props.theme.accentColor};\n  position: relative;\n`;\n\nconst ThemeBtn = styled.button`\n  position: absolute;\n  left: 50px;\n`;\n\nconst CoinList = styled.ul``;\n\nconst Coin = styled.div`\n  width: 400px;\n  height: 100px;\n  border-radius: 10px;\n  padding: 30px;\n  background-color: white;\n  font-size: 20px;\n  margin-bottom: 20px;\n  display: flex;\n  align-items: center;\n`;\n\ninterface ICoin {\n  id: string;\n  is_active: boolean;\n  is_new: boolean;\n  name: string;\n  rank: number;\n  symbol: string;\n  type: string;\n}\n\nfunction Coins() {\n  const { data, isLoading } = useQuery<ICoin[]>(\"allCoins\", fetchCoins);\n  const setThemeState = useSetRecoilState(themeState);\n  const toggleTheme = () => setThemeState((prev) => !prev);\n  return (\n    <Wrapper>\n      {isLoading ? (\n        <Title>\n          <ThemeBtn onClick={toggleTheme}>ToggleTheme</ThemeBtn>\n          <span>Loading...</span>\n        </Title>\n      ) : (\n        <>\n          <Title>\n            <ThemeBtn onClick={toggleTheme}>ToggleTheme</ThemeBtn>\n            <span>Coins</span>\n          </Title>\n          <CoinList>\n            {data?.slice(0, 100).map((coin) => {\n              return (\n                <Coin key={coin.id}>\n                  <Link to={`${coin.id}`} state={{ coin }}>\n                    {coin.name}\n                  </Link>\n                </Coin>\n              );\n            })}\n          </CoinList>\n        </>\n      )}\n    </Wrapper>\n  );\n}\n\nexport default Coins;\n","import styled from \"styled-components\";\nimport {\n  useParams,\n  useLocation,\n  useNavigate,\n  NavLink,\n  Outlet,\n} from \"react-router-dom\";\nimport { useQuery } from \"react-query\";\nimport { fetchCoinInfo } from \"../api\";\nimport { useSetRecoilState } from \"recoil\";\nimport { themeState } from \"../atoms\";\n\nconst Wrapper = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Title = styled.div`\n  width: 100%;\n  height: 100px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 32px;\n  color: ${(props) => props.theme.accentColor};\n  position: relative;\n`;\n\nconst Buttons = styled.div`\n  width: 200px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  position: absolute;\n  left: 50px;\n`;\n\nconst ThemeBtn = styled.button``;\n\nconst BackBtn = styled.button``;\n\nconst Desc = styled.div`\n  width: 300px;\n  margin: 50px 0px;\n  color: ${(props) => props.theme.textColor};\n`;\n\nconst Links = styled.div`\n  width: 400px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 50px;\n`;\n\nconst StyledNavLink = styled(NavLink)`\n  width: 100px;\n  padding: 20px;\n  text-decoration: none;\n  border: none;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: white;\n  border-radius: 20px;\n  color: black;\n  &.active {\n    color: red;\n  }\n`;\n\ninterface InfoData {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  is_new: boolean;\n  is_active: boolean;\n  type: string;\n  description: string;\n  message: string;\n  open_source: boolean;\n  started_at: string;\n  development_status: string;\n  hardware_wallet: boolean;\n  proof_type: string;\n  org_structure: string;\n  hash_algorithm: string;\n  first_data_at: string;\n  last_data_at: string;\n}\n\nfunction Coin() {\n  const setThemeState = useSetRecoilState(themeState);\n  const navigate = useNavigate();\n  const { state } = useLocation();\n  const { coinId } = useParams();\n  const { data, isLoading } = useQuery<InfoData>(\"coinInfo\", () =>\n    fetchCoinInfo(coinId)\n  );\n\n  return (\n    <Wrapper>\n      <Title>\n        <Buttons>\n          <ThemeBtn onClick={() => setThemeState((prev) => !prev)}>\n            Theme toggle\n          </ThemeBtn>\n          <BackBtn onClick={() => navigate(\"/coin-tracker\")}>Go Back</BackBtn>\n        </Buttons>\n        {state ? state.coin.name : isLoading ? \"Loading\" : data?.name}\n      </Title>\n      <Desc>\n        <p>{data?.description}</p>\n      </Desc>\n      <Links>\n        <StyledNavLink\n          to=\"price\"\n          className={({ isActive }) => (isActive ? \"active\" : \"inactive\")}\n        >\n          Price\n        </StyledNavLink>\n        <StyledNavLink\n          to=\"chart\"\n          className={({ isActive }) => (isActive ? \"active\" : \"inactive\")}\n        >\n          Chart\n        </StyledNavLink>\n      </Links>\n      <Outlet />\n    </Wrapper>\n  );\n}\n\nexport default Coin;\n","import { useQuery } from \"react-query\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchCoinHistory } from \"../api\";\nimport ApexChart from \"react-apexcharts\";\nimport styled from \"styled-components\";\n\nconst ChartContainer = styled.div`\n  color: ${(props) => props.theme.textColor};\n`;\n\nfunction Chart() {\n  const { coinId } = useParams();\n  const { data, isLoading } = useQuery(\"coinHistory\", () =>\n    fetchCoinHistory(coinId)\n  );\n  return isLoading ? null : (\n    <ChartContainer id=\"chart\">\n      <ApexChart\n        options={{\n          chart: { type: \"candlestick\", height: 350, width: 800 },\n          xaxis: { type: \"datetime\" },\n          yaxis: { tooltip: { enabled: true } },\n        }}\n        series={[\n          {\n            data: data?.map((price: any, index: number) => {\n              return {\n                x: price.time_open,\n                y: [\n                  price.open.toFixed(2),\n                  price.high.toFixed(2),\n                  price.low.toFixed(2),\n                  price.close.toFixed(2),\n                ],\n              };\n            }),\n          },\n        ]}\n        type=\"candlestick\"\n        height={350}\n        width={800}\n      ></ApexChart>\n    </ChartContainer>\n  );\n}\n\nexport default Chart;\n","import { useQuery } from \"react-query\";\nimport { fetchTickers } from \"../api\";\nimport { useParams } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\ninterface PriceData {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  circulating_supply: number;\n  total_supply: number;\n  max_supply: number;\n  beta_value: number;\n  first_data_at: string;\n  last_updated: string;\n  quotes: {\n    USD: {\n      ath_date: string;\n      ath_price: number;\n      market_cap: number;\n      market_cap_change_24h: number;\n      percent_change_1h: number;\n      percent_change_1y: number;\n      percent_change_6h: number;\n      percent_change_7d: number;\n      percent_change_12h: number;\n      percent_change_15m: number;\n      percent_change_24h: number;\n      percent_change_30d: number;\n      percent_change_30m: number;\n      percent_from_price_ath: number;\n      price: number;\n      volume_24h: number;\n      volume_24h_change_24h: number;\n    };\n  };\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n`;\n\nconst PriceContainer = styled.div`\n  color: ${(props) => props.theme.textColor};\n`;\n\nfunction Price() {\n  const { coinId } = useParams();\n  const { data, isLoading } = useQuery<PriceData>(\"priceInfo\", () =>\n    fetchTickers(coinId)\n  );\n  return (\n    <Wrapper>\n      {isLoading ? (\n        \"Loading...\"\n      ) : (\n        <PriceContainer>\n          <div>\n            Current Price: {`${Math.round(data?.quotes.USD.price || 0)}$`}\n          </div>\n          <div>Daily Change: {`${data?.quotes.USD.percent_change_24h}%`}</div>\n          <div>Weekly Change: {`${data?.quotes.USD.percent_change_7d}%`}</div>\n        </PriceContainer>\n      )}\n    </Wrapper>\n  );\n}\n\nexport default Price;\n","import React from \"react\";\nimport { createGlobalStyle, ThemeProvider } from \"styled-components\";\nimport { darkTheme, lightTheme } from \"./theme\";\nimport { Routes, BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Coins from \"./components/Coins\";\nimport Coin from \"./components/Coin\";\nimport { useRecoilValue } from \"recoil\";\nimport { themeState } from \"./atoms\";\nimport Chart from \"./components/Chart\";\nimport Price from \"./components/Price\";\n\nconst GlobalStyle = createGlobalStyle`\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n\tbackground-color: ${(props) => props.theme.bgColor};\n}\n`;\n\nfunction App() {\n  const isDark = useRecoilValue(themeState);\n  return (\n    <ThemeProvider theme={isDark ? lightTheme : darkTheme}>\n      <GlobalStyle />\n      <Router>\n        <Routes>\n          <Route path=\"/coin-tracker\" element={<Coins />}></Route>\n          <Route path=\"/coin-tracker/:coinId/*\" element={<Coin />}>\n            <Route path=\"chart\" element={<Chart></Chart>}></Route>\n            <Route path=\"price\" element={<Price></Price>}></Route>\n          </Route>\n        </Routes>\n      </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { RecoilRoot } from \"recoil\";\nimport App from \"./App\";\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <RecoilRoot>\n        <App />\n      </RecoilRoot>\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}